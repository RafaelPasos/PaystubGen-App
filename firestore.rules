/**
 * @fileoverview Firestore Security Rules for the Paystub Generator application.
 *
 * Core Philosophy:
 * This ruleset enforces a hierarchical data model with team-based ownership. Each data entity
 * (Employees, ProductionItems, DailyProduction) is nested under a Team document, ensuring
 * data isolation and simplified access control.  The rules are designed to prevent unauthorized
 * data access and modification by enforcing strict ownership and validating data consistency.
 *
 * Data Structure:
 * - /teams/{teamId}: Root collection for teams.
 * - /teams/{teamId}/employees/{employeeId}: Employees belonging to a team.
 * - /teams/{teamId}/productionItems/{productionItemId}: Production items for a team.
 * - /teams/{teamId}/employees/{employeeId}/dailyProduction/{dailyProductionId}: Daily production records for an employee.
 *
 * Key Security Decisions:
 * - Enforces team-based ownership: Only authenticated users can manage data within their team's context.
 * - Data consistency: Ensures that nested documents have the correct team ID.
 * - Write operations are strictly controlled to prevent unauthorized data manipulation.
 *
 * Denormalization for Authorization:
 * The `teamId` is denormalized into the Employee and ProductionItem documents. This allows us to
 * avoid costly `get()` calls to the Team document when checking authorization.  DailyProduction
 * documents do not denormalize teamId but are nested under Employee documents, which have teamId.
 * This allows for team-level authorization without extra reads.
 *
 * Structural Segregation:
 * Team-based data segregation allows for efficient and secure list operations, as data is naturally
 * partitioned by team ID. This eliminates the need for complex filtering and prevents cross-team data access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to team documents.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read, owner-only write (requires schema update for ownership)
     */
    match /teams/{teamId} {
      allow get, list: if true; // Public read for team names, etc.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages employee documents within a team.
     * @path /teams/{teamId}/employees/{employeeId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn() && request.resource.data.teamId == teamId && request.resource.data.id == employeeId;
     * @allow update: if isSignedIn() && resource != null && resource.data.teamId == teamId && resource.data.id == request.resource.data.id;
     * @allow delete: if isSignedIn() && resource != null && resource.data.teamId == teamId;
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @deny create: if !isSignedIn() || request.resource.data.teamId != teamId || request.resource.data.id != employeeId;
     * @deny update: if !isSignedIn() || resource == null || resource.data.teamId != teamId || resource.data.id != request.resource.data.id;
     * @deny delete: if !isSignedIn() || resource == null || resource.data.teamId != teamId;
     * @principle Enforces team-based ownership and data consistency for employee records.
     */
    match /teams/{teamId}/employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.teamId == teamId && request.resource.data.id == employeeId;
      allow update: if isSignedIn() && resource != null && resource.data.teamId == teamId && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && resource != null && resource.data.teamId == teamId;
    }

    /**
     * @description Manages production item documents within a team.
     * @path /teams/{teamId}/productionItems/{productionItemId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn() && request.resource.data.teamId == teamId && request.resource.data.id == productionItemId;
     * @allow update: if isSignedIn() && resource != null && resource.data.teamId == teamId && resource.data.id == request.resource.data.id;
     * @allow delete: if isSignedIn() && resource != null && resource.data.teamId == teamId;
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @deny create: if !isSignedIn() || request.resource.data.teamId != teamId || request.resource.data.id != productionItemId;
     * @deny update: if !isSignedIn() || resource == null || resource.data.teamId != teamId || resource.data.id != request.resource.data.id;
     * @deny delete: if !isSignedIn() || resource == null || resource.data.teamId != teamId;
     * @principle Enforces team-based ownership and data consistency for production item records.
     */
    match /teams/{teamId}/productionItems/{productionItemId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.teamId == teamId && request.resource.data.id == productionItemId;
      allow update: if isSignedIn() && resource != null && resource.data.teamId == teamId && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && resource != null && resource.data.teamId == teamId;
    }

    /**
     * @description Manages daily production records for an employee.
     * @path /teams/{teamId}/employees/{employeeId}/dailyProduction/{dailyProductionId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn() && exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId));
     * @allow update: if isSignedIn() && exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId)) && resource != null;
     * @allow delete: if isSignedIn() && exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId)) && resource != null;
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @deny create: if !isSignedIn() || !exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId));
     * @deny update: if !isSignedIn() || !exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId)) || resource == null;
     * @deny delete: if !isSignedIn() || !exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId)) || resource == null;
     * @principle Restricts access to daily production records to authenticated users and validates the employee exists.
     */
    match /teams/{teamId}/employees/{employeeId}/dailyProduction/{dailyProductionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId));
      allow update: if isSignedIn() && exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId)) && resource != null;
      allow delete: if isSignedIn() && exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId)) && resource != null;
    }
  }

  // Helper function to check if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}