/**
 * @fileoverview Firestore Security Rules for the paystub generator application.
 *
 * Core Philosophy:
 * This ruleset enforces a hierarchical data model with team-based ownership.
 * Access to team data is implicitly granted to authenticated users.
 *
 * Data Structure:
 * - /teams/{teamId}: Root collection for teams.
 * - /teams/{teamId}/employees/{employeeId}: Employees belonging to a team.
 * - /teams/{teamId}/productionItems/{productionItemId}: Production items for a team.
 * - /teams/{teamId}/employees/{employeeId}/dailyProduction/{dailyProductionId}: Daily production records for an employee.
 *
 * Key Security Decisions:
 * - Listing of teams is allowed for any authenticated user.
 * - All write operations are restricted to authenticated users.
 * - Data is segregated by team, with `teamId` being a critical field for authorization.
 * - No data validation is performed beyond requiring authentication.
 *
 * Denormalization for Authorization:
 * - Employee and ProductionItem documents contain a `teamId` field, denormalized from the parent Team document.
 *   This enables rules to validate team membership without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read the list of teams.
     * @path /teams/{teamId}
     * @allow (list) User with any valid auth can list teams.
     * @deny (list) Unauthenticated user cannot list teams.
     * @principle Allows authenticated users to see the list of teams.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      /**
       * @description Allows authenticated users to create, update, and delete teams.
       * @path /teams/{teamId}
       * @allow (create) User with valid auth can create a team.
       * @allow (update) User with valid auth can update a team.
       * @allow (delete) User with valid auth can delete a team.
       * @deny (create) Unauthenticated user cannot create a team.
       * @deny (update) Unauthenticated user cannot update a team.
       * @deny (delete) Unauthenticated user cannot delete a team.
       * @principle Enforces authentication for team management.
       */
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();

      /**
       * @description Allows authenticated users to read employees within a team.
       * @path /teams/{teamId}/employees/{employeeId}
       * @allow (get) User with valid auth can get an employee.
       * @allow (list) User with valid auth can list employees.
       * @deny (get) Unauthenticated user cannot get an employee.
       * @deny (list) Unauthenticated user cannot list employees.
       * @principle Restricts employee access to authenticated users within the team.
       */
      match /employees/{employeeId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();

        /**
         * @description Allows authenticated users to create, update, and delete employees within a team.
         * @path /teams/{teamId}/employees/{employeeId}
         * @allow (create) User with valid auth can create an employee.
         * @allow (update) User with valid auth can update an employee.
         * @allow (delete) User with valid auth can delete an employee.
         * @deny (create) Unauthenticated user cannot create an employee.
         * @deny (update) Unauthenticated user cannot update an employee.
         * @deny (delete) Unauthenticated user cannot delete an employee.
         * @principle Enforces authentication for employee management within a team.
         */
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();

        /**
         * @description Allows authenticated users to read daily production records for an employee.
         * @path /teams/{teamId}/employees/{employeeId}/dailyProduction/{dailyProductionId}
         * @allow (get) User with valid auth can get a daily production record.
         * @allow (list) User with valid auth can list daily production records.
         * @deny (get) Unauthenticated user cannot get a daily production record.
         * @deny (list) Unauthenticated user cannot list daily production records.
         * @principle Restricts access to daily production records to authenticated users within the team and employee.
         */
        match /dailyProduction/{dailyProductionId} {
          allow get: if isSignedIn();
          allow list: if isSignedIn();

          /**
           * @description Allows authenticated users to create, update, and delete daily production records.
           * @path /teams/{teamId}/employees/{employeeId}/dailyProduction/{dailyProductionId}
           * @allow (create) User with valid auth can create a daily production record.
           * @allow (update) User with valid auth can update a daily production record.
           * @allow (delete) User with valid auth can delete a daily production record.
           * @deny (create) Unauthenticated user cannot create a daily production record.
           * @deny (update) Unauthenticated user cannot update a daily production record.
           * @deny (delete) Unauthenticated user cannot delete a daily production record.
           * @principle Enforces authentication for daily production management.
           */
          allow create: if isSignedIn();
          allow update: if isSignedIn();
          allow delete: if isSignedIn();
        }
      }

      /**
       * @description Allows authenticated users to read production items within a team.
       * @path /teams/{teamId}/productionItems/{productionItemId}
       * @allow (get) User with valid auth can get a production item.
       * @allow (list) User with valid auth can list production items.
       * @deny (get) Unauthenticated user cannot get a production item.
       * @deny (list) Unauthenticated user cannot list production items.
       * @principle Restricts production item access to authenticated users within the team.
       */
      match /productionItems/{productionItemId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();

        /**
         * @description Allows authenticated users to create, update, and delete production items within a team.
         * @path /teams/{teamId}/productionItems/{productionItemId}
         * @allow (create) User with valid auth can create a production item.
         * @allow (update) User with valid auth can update a production item.
         * @allow (delete) User with valid auth can delete a production item.
         * @deny (create) Unauthenticated user cannot create a production item.
         * @deny (update) Unauthenticated user cannot update a production item.
         * @deny (delete) Unauthenticated user cannot delete a production item.
         * @principle Enforces authentication for production item management within a team.
         */
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}