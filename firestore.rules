/**
 * @fileOverview
 * This ruleset enforces a strict data segregation model based on teams. Each team's data (employees, production items, daily production) is isolated under its own document.
 * Data Structure:
 * - /teams/{teamId}: Root collection for teams.
 * - /teams/{teamId}/employees/{employeeId}: Employees belonging to a team.
 * - /teams/{teamId}/productionItems/{productionItemId}: Production items associated with a team.
 * - /teams/{teamId}/employees/{employeeId}/dailyProduction/{dailyProductionId}: Daily production records for an employee.
 *
 * Key Security Decisions:
 * - All data is scoped to a team. Users must be authenticated to access team data.
 * - No global admin roles are defined, all access control is managed at the team level.
 * - The rules explicitly deny any operations not specifically allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the 'teams' collection. Only authenticated users can create teams.
     * @path /teams/{teamId}
     * @allow create: if isSignedIn()
     * @deny get: Always deny read access to prevent listing all teams.
     * @deny list: Always deny read access to prevent listing all teams.
     * @deny update: Always deny team updates.
     * @deny delete: Always deny team deletions.
     * @principle Only authenticated users can create teams
     */
    match /teams/{teamId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;

       /**
        * @description Controls access to the 'employees' subcollection within a team.
        * @path /teams/{teamId}/employees/{employeeId}
        * @allow get: if isSignedIn()
        * @allow list: if isSignedIn()
        * @allow create: if isSignedIn()
        * @allow update: if isSignedIn() && isExistingEmployee(teamId, employeeId)
        * @allow delete: if isSignedIn() && isExistingEmployee(teamId, employeeId)
        * @deny create: if request.resource.data.teamId != teamId; //Prevents creation of an employee if teamId does not match
        * @deny update: if request.resource.data.teamId != resource.data.teamId; //Prevent changing the employee teamId
        * @principle Enforces team-based access control for employees.
        */
      match /employees/{employeeId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.teamId == teamId;
        allow update: if isSignedIn() && isExistingEmployee(teamId, employeeId) && request.resource.data.teamId == resource.data.teamId;
        allow delete: if isSignedIn() && isExistingEmployee(teamId, employeeId);
      }

        /**
         * @description Controls access to the 'productionItems' subcollection within a team.
         * @path /teams/{teamId}/productionItems/{productionItemId}
         * @allow get: if isSignedIn()
         * @allow list: if isSignedIn()
         * @allow create: if isSignedIn() && request.resource.data.teamId == teamId
         * @allow update: if isSignedIn() && isExistingProductionItem(teamId, productionItemId) && request.resource.data.teamId == resource.data.teamId
         * @allow delete: if isSignedIn() && isExistingProductionItem(teamId, productionItemId)
         * @deny create: if request.resource.data.teamId != teamId;
         * @deny update: if request.resource.data.teamId != resource.data.teamId;
         * @principle Enforces team-based access control for production items.
         */
      match /productionItems/{productionItemId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.teamId == teamId;
        allow update: if isSignedIn() && isExistingProductionItem(teamId, productionItemId) && request.resource.data.teamId == resource.data.teamId;
        allow delete: if isSignedIn() && isExistingProductionItem(teamId, productionItemId);
      }

        /**
         * @description Controls access to the 'dailyProduction' subcollection within each employee document.
         * @path /teams/{teamId}/employees/{employeeId}/dailyProduction/{dailyProductionId}
         * @allow get: if isSignedIn()
         * @allow list: if isSignedIn()
         * @allow create: if isSignedIn()
         * @allow update: if isSignedIn() && isExistingDailyProduction(teamId, employeeId, dailyProductionId)
         * @allow delete: if isSignedIn() && isExistingDailyProduction(teamId, employeeId, dailyProductionId)
         * @principle Enforces team-based access control for daily production records.
         */
      match /employees/{employeeId}/dailyProduction/{dailyProductionId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isExistingDailyProduction(teamId, employeeId, dailyProductionId);
        allow delete: if isSignedIn() && isExistingDailyProduction(teamId, employeeId, dailyProductionId);
      }
    }

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if an employee exists.
     * @param {string} teamId The ID of the team.
     * @param {string} employeeId The ID of the employee.
     * @returns {boolean} True if the employee exists, false otherwise.
     */
    function isExistingEmployee(teamId, employeeId) {
      return exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId));
    }

    /**
     * @description Checks if a production item exists.
     * @param {string} teamId The ID of the team.
     * @param {string} productionItemId The ID of the production item.
     * @returns {boolean} True if the production item exists, false otherwise.
     */
    function isExistingProductionItem(teamId, productionItemId) {
      return exists(/databases/$(database)/documents/teams/$(teamId)/productionItems/$(productionItemId));
    }

    /**
     * @description Checks if a daily production record exists.
     * @param {string} teamId The ID of the team.
     * @param {string} employeeId The ID of the employee.
     * @param {string} dailyProductionId The ID of the daily production record.
     * @returns {boolean} True if the daily production record exists, false otherwise.
     */
    function isExistingDailyProduction(teamId, employeeId, dailyProductionId) {
      return exists(/databases/$(database)/documents/teams/$(teamId)/employees/$(employeeId)/dailyProduction/$(dailyProductionId));
    }
  }
}